# app.py
# Requires: streamlit, requests, web3

try:
    import streamlit as st
except ModuleNotFoundError:
    raise ModuleNotFoundError("Streamlit is not installed. Please install it with: pip install streamlit")

import requests
from web3 import Web3

ETHERSCAN_API_KEY = "XSUUHZ6HN6ED625QCRD6DK2UBFBKT65G"

# üîß Page configuration
st.set_page_config(page_title="SniperBase", layout="wide", page_icon="üß†")

# üé® Custom CSS
st.markdown("""
    <style>
        body {
            background-color: #0f1117;
            color: #ffffff;
        }
        .main {
            background-color: #0f1117;
            padding: 20px;
        }
        h1, h2, h3, .st-bf, .st-af {
            color: #61dafb;
        }
        .stAlert {
            border-radius: 10px;
        }
        .stMetric {
            background-color: #1c1f26;
            border-radius: 10px;
            padding: 10px;
        }
    </style>
"""", unsafe_allow_html=True)

# üß† Title
st.title("üß† SniperBase")
st.markdown("### –¢–≤—ñ–π —Å–Ω–∞–π–ø–µ—Ä –ø–∞–º–ø—ñ–≤ —ñ –º–µ–º-—Ç–æ–∫–µ–Ω—ñ–≤ üî•")

st.info("‚öôÔ∏è MVP-–≤–µ—Ä—Å—ñ—è. –ë—ñ–ª—å—à–µ —Ñ—É–Ω–∫—Ü—ñ–π —Å–∫–æ—Ä–æ!")

# üí¨ Contract input
st.subheader("üîç –í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É —Ç–æ–∫–µ–Ω–∞")
token_address = st.text_input("–ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É (ERC-20):")

# üí° Blockchain connection
rpc_url = "https://eth.llamarpc.com"
web3 = Web3(Web3.HTTPProvider(rpc_url))

# ‚úÖ ABI
erc20_abi = [
    {"constant": True, "inputs": [], "name": "name", "outputs": [{"name": "", "type": "string"}], "type": "function"},
    {"constant": True, "inputs": [], "name": "symbol", "outputs": [{"name": "", "type": "string"}], "type": "function"},
    {"constant": True, "inputs": [], "name": "decimals", "outputs": [{"name": "", "type": "uint8"}], "type": "function"},
    {"constant": True, "inputs": [], "name": "totalSupply", "outputs": [{"name": "", "type": "uint256"}], "type": "function"}
]

if token_address:
    try:
        contract = web3.eth.contract(address=web3.to_checksum_address(token_address), abi=erc20_abi)
        name = contract.functions.name().call()
        symbol = contract.functions.symbol().call()
        decimals = contract.functions.decimals().call()
        total_supply = contract.functions.totalSupply().call() / (10 ** decimals)

        st.success(f"üßæ **–ù–∞–∑–≤–∞ —Ç–æ–∫–µ–Ω–∞**: {name}")
        st.success(f"üè∑Ô∏è **–°–∏–º–≤–æ–ª**: {symbol}")
        st.info(f"üìê **–î–µc–∏–º–∞–ª–∏**: {decimals}")
        st.info(f"üì¶ **–ó–∞–≥–∞–ª—å–Ω–∞ –µ–º—ñ—Å—ñ—è**: {total_supply:,.0f} {symbol}")

    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ç–æ–∫–µ–Ω–∞: {e}")

    # üîé Etherscan Verification
    try:
        etherscan_url = f"https://api.etherscan.io/api?module=contract&action=getsourcecode&address={token_address}&apikey={ETHERSCAN_API_KEY}"
        response = requests.get(etherscan_url)

        if response.status_code == 200:
            data = response.json()
            if data.get("status") == "1" and "result" in data and len(data["result"]) > 0:
                contract_info = data["result"][0]
                is_verified = contract_info.get("SourceCode", "") != ""
                creator_address = contract_info.get("ContractCreator", "–ù–µ–≤—ñ–¥–æ–º–æ")

                st.markdown(f"üîê **–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É**: {'‚úÖ –¢–∞–∫' if is_verified else '‚ùå –ù—ñ'}")
                st.markdown(f"üë§ **–í–ª–∞—Å–Ω–∏–∫**: `{creator_address}`")
            else:
                st.warning("‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–∞ Etherscan")
        else:
            st.error("‚ùå Etherscan API –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î")

    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Etherscan: {e}")

    # üìà DexScreener
    try:
        dex_url = f"https://api.dexscreener.com/latest/dex/tokens/{token_address}"
        response = requests.get(dex_url)

        if response.status_code == 200:
            data = response.json()
            if "pairs" in data and data["pairs"]:
                pair = data["pairs"][0]
                price = pair.get("priceUsd", "N/A")
                liquidity_usd = pair.get("liquidity", {}).get("usd", "N/A")
                fdv = pair.get("fdv", "N/A")
                volume = pair.get("volume", {}).get("h24", "N/A")

                st.divider()
                st.subheader("üìä –î–∞–Ω—ñ –∑ DexScreener")
                st.metric("üí≤ –¶—ñ–Ω–∞", f"{price}")
                st.metric("üíß –õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å", f"${liquidity_usd}")
                st.metric("üì¶ –û–±‚Äô—î–º (24h)", f"${volume}")
                st.metric("üè∑Ô∏è FDV", f"${int(fdv):,}" if fdv != "N/A" else "N/A")
            else:
                st.warning("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä—É –¥–ª—è —Ü—å–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤ DexScreener.")
        else:
            st.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ DexScreener.")

    except Exception as e:
        st.error(f"‚ùå DexScreener –ø–æ–º–∏–ª–∫–∞: {e}")
