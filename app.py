# app.py

import streamlit as st
import requests
from web3 import Web3

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
ETHERSCAN_API_KEY = "XSUUHZ6HN6ED625QCRD6DK2UBFBKT65G"
rpc_url = "https://eth.llamarpc.com"
web3 = Web3(Web3.HTTPProvider(rpc_url))

st.set_page_config(page_title="SniperBase", layout="wide")

# --- –°–¢–ò–õ–Ü ---
st.markdown("""
<style>
body {
    background-color: #0b0f1a;
    color: #eaecef;
}
[data-testid="stAppViewContainer"] {
    background-color: #0b0f1a;
}
h1, h2, h3 {
    color: #f0b90b !important;
}
.stTextInput > div > div > input {
    background-color: #1c1f2b;
    color: white;
    border: 1px solid #2a2e3d;
}
.stMetric {
    background-color: #1c1f2b;
    border-radius: 8px;
    padding: 16px;
    margin: 8px;
    color: white;
    font-weight: 600;
}
.stMarkdown p {
    color: #eaecef;
}
.stAlert {
    background-color: #111317;
    border: 1px solid #f0b90b;
}
</style>
""", unsafe_allow_html=True)

# --- –í—Å—Ç—É–ø–Ω–∏–π –±–ª–æ–∫ (Landing) ---
st.markdown("# üöÄ SniperBase")
st.markdown("### –°–∫–∞–Ω—É–π, –ø–µ—Ä–µ–≤—ñ—Ä—è–π —Ç–∞ —Ä–µ–∞–≥—É–π –Ω–∞ –Ω–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏ –º–∏—Ç—Ç—î–≤–æ!")
st.markdown("–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –º–µ–º-–∫–æ—ó–Ω—ñ–≤ —Ç–∞ –∞–ª—å—Ç–∫–æ—ó–Ω—ñ–≤ ‚Äî –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ –∑ **Etherscan** —ñ **DexScreener**.")

# --- –ü–æ–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—è ---
st.markdown("### üß† –í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É —Ç–æ–∫–µ–Ω–∞")
token_address = st.text_input("ERC-20 –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É:")

# --- ABI –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ---
erc20_abi = [
    {"constant": True, "inputs": [], "name": "name", "outputs": [{"name": "", "type": "string"}], "type": "function"},
    {"constant": True, "inputs": [], "name": "symbol", "outputs": [{"name": "", "type": "string"}], "type": "function"},
    {"constant": True, "inputs": [], "name": "decimals", "outputs": [{"name": "", "type": "uint8"}], "type": "function"},
    {"constant": True, "inputs": [], "name": "totalSupply", "outputs": [{"name": "", "type": "uint256"}], "type": "function"}
]

# --- –õ–æ–≥—ñ–∫–∞ ---
if token_address:
    try:
        contract = web3.eth.contract(address=web3.to_checksum_address(token_address), abi=erc20_abi)
        name = contract.functions.name().call()
        symbol = contract.functions.symbol().call()
        decimals = contract.functions.decimals().call()
        total_supply = contract.functions.totalSupply().call() / (10 ** decimals)

        st.success(f"üü° **–ù–∞–∑–≤–∞ —Ç–æ–∫–µ–Ω–∞:** {name}")
        st.success(f"üü° **–°–∏–º–≤–æ–ª:** {symbol}")
        st.info(f"üü° **–î–µc–∏–º–∞–ª–∏:** {decimals}")
        st.info(f"üü° **–ó–∞–≥–∞–ª—å–Ω–∞ –µ–º—ñ—Å—ñ—è:** {total_supply:,.0f} {symbol}")

    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ç–æ–∫–µ–Ω–∞: {e}")

    # --- ETHERSCAN ---
    try:
        etherscan_url = f"https://api.etherscan.io/api?module=contract&action=getsourcecode&address={token_address}&apikey={ETHERSCAN_API_KEY}"
        response = requests.get(etherscan_url)
        if response.status_code == 200:
            data = response.json()
            if data.get("status") == "1" and "result" in data and len(data["result"]) > 0:
                contract_info = data["result"][0]
                is_verified = contract_info.get("SourceCode", "") != ""
                creator_address = contract_info.get("ContractCreator", "–ù–µ–≤—ñ–¥–æ–º–æ")

                st.markdown(f"üü° **–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É:** {'‚úÖ –¢–∞–∫' if is_verified else '‚ùå –ù—ñ'}")
                st.markdown(f"üë§ **–í–ª–∞—Å–Ω–∏–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É:** `{creator_address}`")
            else:
                st.warning("‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–∞ Etherscan.")
        else:
            st.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ Etherscan API.")
    except Exception as e:
        st.error(f"‚ùå Etherscan API Error: {e}")

    # --- DexScreener ---
    try:
        dex_url = f"https://api.dexscreener.com/latest/dex/tokens/{token_address}"
        response = requests.get(dex_url)
        if response.status_code == 200:
            data = response.json()
            if "pairs" in data and data["pairs"]:
                pair = data["pairs"][0]
                price = pair.get("priceUsd", "N/A")
                liquidity_usd = pair.get("liquidity", {}).get("usd", "N/A")
                fdv = pair.get("fdv", "N/A")
                volume = pair.get("volume", {}).get("h24", "N/A")

                st.markdown("---")
                st.markdown("## üìä –î–∞–Ω—ñ –∑ DexScreener")

                col1, col2, col3, col4 = st.columns(4)
                col1.metric("üí∞ –¶—ñ–Ω–∞", f"${float(price):,.6f}" if price != "N/A" else "N/A")
                col2.metric("üíß –õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å", f"${float(liquidity_usd):,.2f}" if liquidity_usd != "N/A" else "N/A")
                col3.metric("üì¶ –û–± º—î–º (24h)", f"${float(volume):,.2f}" if volume != "N/A" else "N/A")
                col4.metric("üè∑Ô∏è FDV", f"${int(fdv):,}" if fdv != "N/A" else "N/A")
            else:
                st.warning("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤—É –ø–∞—Ä—É –Ω–∞ DexScreener.")
        else:
            st.warning("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ DexScreener API.")
    except Exception as e:
        st.error(f"‚ùå DexScreener –ø–æ–º–∏–ª–∫–∞: {e}")
