import streamlit as st
import requests
ETHERSCAN_API_KEY = "XSUUHZGHN6ED625QCR6D6K2UBFBKT6S6"

st.set_page_config(page_title="SniperBase", layout="wide")

st.title("üöÄ SniperBase")
st.markdown("–¢–≤—ñ–π –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –ø–∞–º–ø—ñ–≤, —Å–Ω–∞–π–ø—ñ–Ω–≥—É –º–µ–º-—Ç–æ–∫–µ–Ω—ñ–≤ —Ç–∞ —à–≤–∏–¥–∫–æ–≥–æ –≤—Ö–æ–¥—É –≤ —É–≥–æ–¥–∏. –¢—É—Ç –±—É–¥–µ üî•.")

st.info("üß† MVP —É –ø—Ä–æ—Ü–µ—Å—ñ. –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª —Å–∫–æ—Ä–æ –±—É–¥–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ.")
from web3 import Web3

st.subheader("üîç –í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É —Ç–æ–∫–µ–Ω–∞")

# –í–≤–µ–¥–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
token_address = st.text_input("–ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É (ERC-20):")

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ RPC (–∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π RPC –¥–ª—è –∫—Ä–∞—â–æ—ó —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ)
rpc_url = "https://eth.llamarpc.com"
web3 = Web3(Web3.HTTPProvider(rpc_url))

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π ABI –¥–ª—è ERC20
erc20_abi = [
    {"constant":True,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"type":"function"},
    {"constant":True,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"type":"function"},
    {"constant":True,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"type":"function"},
    {"constant":True,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"type":"function"},
]

if token_address:
    try:
        contract = web3.eth.contract(address=web3.to_checksum_address(token_address), abi=erc20_abi)
        name = contract.functions.name().call()
        symbol = contract.functions.symbol().call()
        decimals = contract.functions.decimals().call()
        total_supply = contract.functions.totalSupply().call() / (10 ** decimals)

        etherscan_url = f"https://api.etherscan.io/api?module=contract&action=getsourcecode&address={token_address}&apikey={ETHERSCAN_API_KEY}"
        response = requests.get(etherscan_url)
        etherscan_url = f"https://api.etherscan.io/api?module=contract&action=getsourcecode&address={token_address}&apikey={ETHERSCAN_API_KEY}"
        response = requests.get(etherscan_url)
        
        if response.status_code == 200:
            data = response.json()
            if data.get("status") == "1" and "result" in data and len(data["result"]) > 0:
                contract_info = data["result"][0]
                source_code = contract_info.get("SourceCode", "")
                is_verified = source_code != ""
                creator_address = contract_info.get("ContractCreator", "–ù–µ–≤—ñ–¥–æ–º–æ")

                st.markdown(f"‚úÖ –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: {'‚úÖ –¢–∞–∫' if is_verified else '‚ùå –ù—ñ'}")
                st.markdown(f"üßë‚Äçüíª –ê–¥—Ä–µ—Å–∞ –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: `{creator_address}`")
            else:
                st.warning("‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–∞ Etherscan")
        else:
            st.error("‚ùå Etherscan API –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î")

        if response.status_code == 200:
            data = response.json()
            if data["status"] == "1":
                contract_info = data["result"][0]
                is_verified = contract_info["SourceCode"] != ""
                creator_address = contract_info["ContractCreator"]
                st.markdown(f"üõ°Ô∏è –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: {'‚úÖ –¢–∞–∫' if is_verified else '‚ùå –ù—ñ'}")
                st.markdown(f"üìÆ –ê–¥—Ä–µ—Å–∞ –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: `{creator_address}`")
            else:
                st.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ Etherscan")
        else:
            st.error("‚ùå Etherscan API –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î")

        st.success(f"üü¢ –ù–∞–∑–≤–∞ —Ç–æ–∫–µ–Ω–∞: {name}")
        st.success(f"üü¢ –°–∏–º–≤–æ–ª: {symbol}")
        st.info(f"üìò –î–µ—Ü–∏–º–∞–ª–∏: {decimals}")
        st.info(f"üìò –ó–∞–≥–∞–ª—å–Ω–∞ –µ–º—ñ—Å—ñ—è: {total_supply:.0f} {symbol}")

    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ç–æ–∫–µ–Ω–∞: {e}")

        # --- DexScreener ---
        dex_url = f"https://api.dexscreener.com/latest/dex/tokens/{token_address}"
        response = requests.get(dex_url)

        if response.status_code == 200:
            data = response.json()
            if "pairs" in data and data["pairs"]:
                pair = data["pairs"][0]
                price = pair["priceUsd"]
                liquidity_usd = pair["liquidity"]["usd"]
                fdv = pair.get("fdv", "N/A")
                volume = pair["volume"]["h24"]

                st.divider()
                st.subheader("üìä –î–∞–Ω—ñ –∑ DexScreener")
                st.metric("üí≤–¶—ñ–Ω–∞", f"${price}")
                st.metric("üíß–õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å", f"${int(liquidity_usd):,}")
                st.metric("üìà –û–± º—î–º (24h)", f"${int(volume):,}")
                st.metric("FDV", f"${int(fdv):,}" if fdv != "N/A" else "N/A")
            else:
                st.warning("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä—É –¥–ª—è —Ü—å–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤ DexScreener.")
        else:
            st.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ DexScreener.")
    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
