import streamlit as st
import requests
from web3 import Web3

# ====== –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó ======
ETHERSCAN_API_KEY = "XSUUHZ6HN6ED625QCRD6DK2UBFBKT65G"
rpc_url = "https://eth.llamarpc.com"
web3 = Web3(Web3.HTTPProvider(rpc_url))

st.set_page_config(page_title="SniperBase", layout="wide")

# ====== –°–¢–ò–õ–Ü ======
st.markdown("""
    <style>
        body { background-color: #000000; color: #f0f0f0; }
        .block-container { padding-top: 2rem; }
        .stTextInput>div>div>input {
            background-color: #1c1c1c;
            color: #f0f0f0;
            border: 1px solid #f0b90b;
        }
        .stMetric { background-color: #1c1c1c; border-radius: 10px; padding: 12px; color: #f0b90b; }
        .stMarkdown h1, .stMarkdown h2, .stMarkdown h3 { color: #f0b90b; }
        .stAlert, .stError, .stSuccess { border-radius: 8px; }
        .stMarkdown a { color: #f0b90b; }
    </style>
""", unsafe_allow_html=True)

# ====== –í—Å—Ç—É–ø ======
st.markdown("## üöÄ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ SniperBase")
st.markdown("–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —à–≤–∏–¥–∫–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤: **–∞–Ω–∞–ª—ñ–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É, –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å, —Ö–æ–ª–¥–µ—Ä–∏ —Ç–∞ MEV-–ø–∞—Å—Ç–∫–∏**")
st.markdown("### üß† –í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É —Ç–æ–∫–µ–Ω–∞")
token_address = st.text_input("üîç ERC-20 –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É:")

# ====== ABI ======
erc20_abi = [
    {"constant": True, "inputs": [], "name": "name", "outputs": [{"name": "", "type": "string"}], "type": "function"},
    {"constant": True, "inputs": [], "name": "symbol", "outputs": [{"name": "", "type": "string"}], "type": "function"},
    {"constant": True, "inputs": [], "name": "decimals", "outputs": [{"name": "", "type": "uint8"}], "type": "function"},
    {"constant": True, "inputs": [], "name": "totalSupply", "outputs": [{"name": "", "type": "uint256"}], "type": "function"}
]

if token_address:
    # ====== –î–∞–Ω—ñ –∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É ======
    try:
        contract = web3.eth.contract(address=web3.to_checksum_address(token_address), abi=erc20_abi)
        name = contract.functions.name().call()
        symbol = contract.functions.symbol().call()
        decimals = contract.functions.decimals().call()
        total_supply = contract.functions.totalSupply().call() / (10 ** decimals)

        st.success(f"ü™ô **–ù–∞–∑–≤–∞ —Ç–æ–∫–µ–Ω–∞:** {name}")
        st.success(f"üí± **–°–∏–º–≤–æ–ª:** {symbol}")
        st.info(f"üî¢ **–î–µc–∏–º–∞–ª–∏:** {decimals}")
        st.info(f"üì¶ **–ó–∞–≥–∞–ª—å–Ω–∞ –µ–º—ñ—Å—ñ—è:** {total_supply:,.0f} {symbol}")

    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: {e}")

   # ======= ETHERSCAN =======
try:
    etherscan_url = f"https://api.etherscan.io/api?module=contract&action=getsourcecode&address={token_address}&apikey={ETHERSCAN_API_KEY}"
    response = requests.get(etherscan_url, timeout=10)

    if response.status_code == 200:
        data = response.json()
        if data.get("status") == "1" and data.get("result"):
            contract_info = data["result"][0]
            source_code = contract_info.get("SourceCode", "")
            is_verified = source_code.strip() != ""
            st.session_state["is_verified"] = is_verified
            st.session_state["contract_source"] = source_code

            creator_address = contract_info.get("ContractCreator", "–ù–µ–≤—ñ–¥–æ–º–æ")
            if is_verified:
                st.markdown("‚úÖ **–ö–æ–Ω—Ç—Ä–∞–∫—Ç –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π:** –¢–∞–∫")
            else:
                st.warning("‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –≤–∏—Ö—ñ–¥–Ω–∏–π –∫–æ–¥")
            st.markdown(f"üìç **–ê–¥—Ä–µ—Å–∞ —Ç–≤–æ—Ä—Ü—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É:** `{creator_address}`")
        else:
            message = data.get("message", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞")
            result = data.get("result", "")
            st.warning(f"‚ö†Ô∏è Etherscan –Ω–µ –∑–º—ñ–≥ –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç: {message}. –ü—Ä–∏—á–∏–Ω–∞: {result}")
    else:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Etherscan: –ö–æ–¥ {response.status_code}")
except Exception as e:
    st.error(f"‚ùå Etherscan –ø–æ–º–∏–ª–∫–∞: {e}")


    # ====== DexScreener ======
    try:
        dex_url = f"https://api.dexscreener.com/latest/dex/tokens/{token_address}"
        response = requests.get(dex_url)
        if response.status_code == 200:
            data = response.json()
            if "pairs" in data and data["pairs"]:
                pair = data["pairs"][0]
                price = pair.get("priceUsd", "N/A")
                liquidity_usd = pair.get("liquidity", {}).get("usd", "N/A")
                volume = pair.get("volume", {}).get("h24", "N/A")
                fdv = pair.get("fdv", "N/A")

                st.markdown("## üìä –î–∞–Ω—ñ –∑ DexScreener")
                col1, col2, col3, col4 = st.columns(4)
                col1.metric("üí∞ –¶—ñ–Ω–∞", f"${float(price):,.6f}" if price != "N/A" else "N/A")
                col2.metric("üíß –õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å", f"${float(liquidity_usd):,.2f}" if liquidity_usd != "N/A" else "N/A")
                col3.metric("üì¶ –û–± º—î–º (24h)", f"${float(volume):,.2f}" if volume != "N/A" else "N/A")
                col4.metric("üè∑Ô∏è FDV", f"${int(fdv):,}" if fdv != "N/A" else "N/A")
            else:
                st.warning("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä—É –¥–ª—è —Ü—å–æ–≥–æ —Ç–æ–∫–µ–Ω–∞")
        else:
            st.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ DexScreener")
    except Exception as e:
        st.error(f"‚ùå DexScreener –ø–æ–º–∏–ª–∫–∞: {e}")

    # ====== –•–æ–ª–¥–µ—Ä–∏ ======
    try:
        st.markdown("## üßç‚Äç‚ôÇÔ∏è –•–æ–ª–¥–µ—Ä–∞–º")
        holder_count_url = f"https://api.ethplorer.io/getTokenInfo/{token_address}?apiKey=freekey"
        resp = requests.get(holder_count_url)
        if resp.status_code == 200:
            data = resp.json()
            holders = data.get("holdersCount", "N/A")
            st.success(f"üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–æ–ª–¥–µ—Ä—ñ–≤: {holders}")
        else:
            st.warning("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ö–æ–ª–¥–µ—Ä—ñ–≤")
    except Exception as e:
        st.error(f"‚ùå –•–æ–ª–¥–µ—Ä–∏ –ø–æ–º–∏–ª–∫–∞: {e}")

    # ======= ANTI-BOT / MEV =======
try:
    st.subheader("üõ°Ô∏è Anti-Bot / MEV –∞–Ω–∞–ª—ñ–∑", divider="orange")

    if not st.session_state.get("is_verified", False):
        st.warning("‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π, –Ω–µ–º–æ–∂–ª–∏–≤–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑")
    else:
        source_code = st.session_state.get("contract_source", "")
        suspicious_functions = ["setBlacklist", "isSniper", "setTradingEnabled", "setMaxTxAmount"]
        flags = [f"üîç –í–∏—è–≤–ª–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é `{f}`" for f in suspicious_functions if f.lower() in source_code.lower()]

        if flags:
            for flag in flags:
                st.warning(flag)
        else:
            st.success("‚úÖ Anti-Bot/MEV —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ")
except Exception as e:
    st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Anti-Bot –∞–Ω–∞–ª—ñ–∑—É: {e}")

